service: rest-api
frameworkVersion: '2'

custom:
  DynamoDBTableName: ${self:service}-users-${self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  profile: ${opt:profile, "serverless-admin"}
  region: ${opt:region, "ca-central-1"} # sls deploy --region us-east-1
  stage: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.DynamoDBTableName}
  lambdaHashingVersion: 20201221

functions:
  userapi:
    handler: api.handler
    events:
      - http:
          path: users
          method: GET
          cors: true
      - http:
          path: users
          method: POST
          cors: true
      - http:
          path: users/{id}
          method: GET
          cors: true
      - http:
          path: users/{id}
          method: PUT
          cors: true
      - http:
          path: users/{id}
          method: DELETE
          cors: true
    environment:
      TABLE_NAME: ${self:custom.DynamoDBTableName}

resources:
  Resources:
    usersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: N
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: ${self:custom.DynamoDBTableName}

plugins:
  - serverless-pseudo-parameter